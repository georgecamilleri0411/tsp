import java.lang.System;public class tsp {	public static void main(String[] args) {        // Parse data file		FileReader.readFile("files/trainfile1.txt");		// Populate an integer array with the city indexes (numbers)		int sequence[] = new int[Utilities.cities.size() - 1];		// Populate the integer array with the city indexes, skipping the first city		int n = 0;		for (int c = 0; c < Utilities.cities.size(); c++) {			if (Utilities.cities.get(c).getIndex() != 1) {				sequence[n] = Utilities.cities.get(c).getIndex();				n++;			}		}		long start = System.nanoTime();		Utilities.generatePermutations(sequence);		long endPermutations = System.nanoTime();		int minVoyage = Utilities.solveTSP_bruteForce();		long endMinVoyage = System.nanoTime();		System.out.print ("Shortest distance: ");		for (int i = 0; i < Utilities.cities.size(); i++) {			System.out.print (Utilities.permutations[minVoyage][i] + " - ");		}		System.out.println (" - total distance: " + Utilities.distances.get(minVoyage).getDistance());		long endDisplayResult = System.nanoTime();		System.out.println ("Runtime: ");		System.out.println ("Generating permutations: " + (endPermutations - start) + " nanoseconds");		System.out.println ("Generating identifying shortest route: " + (endMinVoyage - endPermutations) + " nanoseconds");		System.out.println ("Displaying result: " + (endDisplayResult - endMinVoyage) + " nanoseconds");		/*		for (int p = 0; p < Utilities.permutations.length; p++) {			for (int q = 0; q < Utilities.cities.size() + 1; q++) {				System.out.print (Utilities.permutations[p][q] + " | ");			}			System.out.println();		}		 */	}}